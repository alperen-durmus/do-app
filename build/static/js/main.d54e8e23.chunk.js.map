{"version":3,"sources":["components/Translation.js","App.js","index.js"],"names":["keys","Translation","text","useState","translation","setTranslation","order","setOrder","key","setKey","useEffect","encodedParams","URLSearchParams","append","fetch","method","headers","body","then","res","json","console","log","undefined","message","data","translations","translatedText","catch","err","error","style","marginTop","span","rows","value","require","App","useSpeechContext","segment","microphoneState","stop","setText","sentence","setSentence","translationActive","setTranslationActive","plainString","words","filter","w","map","join","isFinal","className","justify","width","src","preview","onClick","size","placement","captureKey","powerOn","silenceToHangupTime","ReactDOM","render","StrictMode","appId","historyFrames","document","getElementById"],"mappings":"ySAMMA,EAAO,CACT,qDACA,qDACA,qDACA,qDACA,qDACA,qDACA,sDA2DWC,MAxDf,YAA8B,IAARC,EAAO,EAAPA,KACd,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAsBJ,mBAASH,EAAKM,IAApC,mBAAOE,EAAP,KAAYC,EAAZ,KA0CJ,OAvCIC,qBAAU,WAEN,IAAMC,EAAgB,IAAIC,gBAC1BD,EAAcE,OAAO,IAAKX,GAC1BS,EAAcE,OAAO,SAAU,MAC/BF,EAAcE,OAAO,SAAU,MAe/BC,MAbY,iEAEI,CACdC,OAAQ,OACRC,QAAS,CACP,eAAgB,oCAChB,kBAAmB,mBACnB,iBAAkBR,EAClB,kBAAmB,oCAErBS,KAAMN,IAIPO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACFC,QAAQC,IAAIF,QACQG,GAAhBH,EAAKI,SACLjB,EAASD,EAAQ,GACjBG,EAAOT,EAAKM,MAEZe,QAAQC,IAAIhB,GACZD,EAAee,EAAKK,KAAKC,aAAa,GAAGC,oBAGhDC,OAAM,SAAAC,GAAG,OAAIR,QAAQS,MAAM,SAAWD,QAExC,CAAC3B,EAAMI,IAMV,mCACK,cAAC,IAAD,CAAKyB,MAAO,CAACC,UAAU,IAAvB,SACG,cAAC,IAAD,CAAKC,KAAM,GAAX,SACI,cAAC,IAAD,CAAUC,KAAM,GAAIC,MAAO/B,WCnDjCgC,EAAQ,KA6DPC,MA1Df,WACE,MAA0CC,6BAAlCC,EAAR,EAAQA,QAER,GAFA,EAAiBC,gBAAjB,EAAkCC,KAEVtC,mBAAS,KAAjC,mBAAOD,EAAP,KAAawC,EAAb,KACA,EAAgCvC,qBAAhC,mBAAOwC,EAAP,KAAiBC,EAAjB,KACA,EAAkDzC,oBAAS,GAA3D,mBAAO0C,EAAP,KAA0BC,EAA1B,KAiBA,OAdApC,qBAAU,WACR,GAAI6B,EAAS,CACX,IAAMQ,EAAcR,EAAQS,MAAMC,QAAO,SAAAC,GAAC,OAAIA,EAAEf,SAAOgB,KAAI,SAAAD,GAAC,OAAIA,EAAEf,SAAOiB,KAAK,KAC9ER,EAAYG,GAETR,EAAQc,SACTX,EAAQxC,EAAO,IAAMyC,MAIxB,CAACJ,IAKF,sBAAKe,UAAU,MAAf,UACE,cAAC,IAAD,CAAKC,QAAQ,SAAb,SACE,cAAC,IAAD,UACA,cAAC,IAAD,CACEC,MAAO,IACPC,IAAI,wCACJC,SAAS,QAKb,cAAC,IAAD,UACE,cAAC,IAAD,CAAKzB,KAAM,GAAX,SACE,cAAC,IAAD,CAAUC,KAAM,GAAIC,MAAOjC,QAG/B,cAAC,IAAD,CAAKqD,QAAQ,SAASxB,MAAO,CAACC,UAAU,IAAxC,SACE,cAAC,IAAD,CAAKC,KAAM,EAAX,SACE,cAAC,IAAD,CAAQ0B,QAAS,kBAAMb,GAAqB,IAAOc,KAAK,QAAQN,UAAU,SAA1E,0BAIHT,GAAqB,cAAC,EAAD,CAAa3C,KAAMA,IAEzC,cAAC,gBAAD,CAAe2D,UAAU,WACzB,cAAC,mBAAD,CAAkBA,UAAU,SAASC,WAAW,GAAGC,QAAQ,OAAOC,oBAAoB,SACtF,cAAC,aAAD,QC1DNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,iBAAD,CAAgBC,MAAM,uCAAuCC,cAAc,OAA3E,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.d54e8e23.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Button, Row, Col } from 'antd';\n\nimport TextArea from \"antd/lib/input/TextArea\";\n\n\nconst keys = [\n    \"5e223eb6bamsh3e67e1f930affeap11c6f6jsn12b8c0f099eb\",\n    \"91c156e00fmsh7996f72b706cb68p1635ecjsn949aec97e020\",\n    \"4f7d012eb3msh396b0129a6a47e5p109d1ejsn13e344daa0d1\",\n    \"3555e92f7amsh0a125ae5c98c698p15e089jsn972ee7a368b9\",\n    \"2a448a49e2msh3f9407b760b2370p10dcb9jsnd5ced2a24943\",\n    \"8de98a5141mshc8d4d96bebafb63p132eaejsn1342a2175866\",\n    \"236d0a9cafmsh4d5baf3caf790fap1ca65cjsn2ab6c637ad6f\",\n];\n\nfunction Translation({text}) {\n        const [translation, setTranslation] = useState(\"\")\n        const [order, setOrder] = useState(0)\n        const [key, setKey] = useState(keys[order])\n\n\n        useEffect(() => {\n\n            const encodedParams = new URLSearchParams();\n            encodedParams.append(\"q\", text);\n            encodedParams.append(\"target\", \"tr\");\n            encodedParams.append(\"source\", \"en\");\n          \n            const url = 'https://google-translate1.p.rapidapi.com/language/translate/v2';\n          \n            const options = {\n              method: 'POST',\n              headers: {\n                'content-type': 'application/x-www-form-urlencoded',\n                'Accept-Encoding': 'application/gzip',\n                'X-RapidAPI-Key': key,\n                'X-RapidAPI-Host': 'google-translate1.p.rapidapi.com'\n              },\n              body: encodedParams\n            };\n\n            fetch(url, options)\n            .then(res => res.json())\n            .then(json => {\n                console.log(json)\n                if (json.message != undefined) {\n                    setOrder(order + 1);\n                    setKey(keys[order])\n                } else {\n                    console.log(order)\n                    setTranslation(json.data.translations[0].translatedText)\n                }\n            })\n            .catch(err => console.error('error:' + err));\n\n        }, [text, order])\n      \n      \n        \n\n    return (\n        <>\n             <Row style={{marginTop:20}}>\n                <Col span={24}>\n                    <TextArea rows={10} value={translation}/>\n                </Col>\n            </Row>\n        </>\n    )\n}\n\nexport default Translation;","import React, { useEffect, useState } from \"react\";\nimport { useSpeechContext } from \"@speechly/react-client\";\nimport {\n  PushToTalkButton,\n  BigTranscript,\n  IntroPopup,\n} from \"@speechly/react-ui\";\nimport { Button, Row, Col, Image } from 'antd';\n\n\nimport Translation from \"./components/Translation\";\nimport TextArea from \"antd/lib/input/TextArea\";\n\n\nconst fetch = require('node-fetch');\n\n\nfunction App() {\n  const { segment, microphoneState, stop} = useSpeechContext()\n\n  const [text, setText] = useState(\"\")\n  const [sentence, setSentence] = useState()\n  const [translationActive, setTranslationActive] = useState(false);\n\n\n  useEffect(() => {\n    if (segment) {\n      const plainString = segment.words.filter(w => w.value).map(w => w.value).join(' ');\n      setSentence(plainString);\n\n      if(segment.isFinal) {\n        setText(text + \" \" + sentence)\n      }\n\n    }\n  }, [segment]);\n\n\n\n  return (\n    <div className=\"App\">\n      <Row justify=\"center\">\n        <Col>\n        <Image\n          width={200}\n          src=\"https://i.im.ge/2022/06/14/rvdVWJ.jpg\"\n          preview={false}\n        />\n\n        </Col>\n      </Row>\n      <Row>\n        <Col span={24}>\n          <TextArea rows={10} value={text}/>\n        </Col>\n      </Row>\n      <Row justify=\"center\" style={{marginTop:20}}>\n        <Col span={1}>\n          <Button onClick={() => setTranslationActive(true)} size=\"large\" className=\"button\">Ã‡evir</Button>\n        </Col>\n      </Row>\n      \n      {translationActive && <Translation text={text} />}\n\n      <BigTranscript placement=\"bottom\"/>\n      <PushToTalkButton placement=\"bottom\" captureKey=\"\" powerOn=\"auto\" silenceToHangupTime=\"2000\"/>\n      <IntroPopup />\n    </div>\n  );\n}\n\n\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { SpeechProvider } from '@speechly/react-client';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <SpeechProvider appId=\"e950413e-1fa7-4dbc-8f31-7ff070ab38e2\" historyFrames=\"1000\">\n      <App />\n    </SpeechProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}